---
title: "week5"
format:
  html:
    code-fold: true
    code-tools: true
embed-resources: true
---

```{r}
#| message: false

library(tidyclust)
library(tidyverse)
library(tidymodels)
library(plotly)
library(foreach)
library(doParallel)
registerDoParallel(cores = detectCores() - 1)
set.seed(599)

source("functions.R")
```

```{r}
image_helper <- function(list_res = list_res) {
  lapply(list_res, function(x) image(x))
}
```

```{r}
# get prop 1 and -1 from set of matrices
H_function <- function(list_of_results = list_of_results) {
  result <- lapply(list_of_results, function(x) {
    vec <- x |>
      as.vector() |>
      na.omit()
    c("One" = sum(vec == 1), "Neg_One" = sum(vec == -1))})
  result <- data.frame(result)
  colnames(result) <- 2:(ncol(result) + 1)
  return(data.frame(t(result)) |> 
    rownames_to_column("Cluster_Num"))
}
wrapper_func <- function(data = data,
                         starting_seed = 599) {
  print(data |> 
    ggplot(aes(x = X1, y = X2)) +
    geom_point() +
    theme_minimal() +
    ggtitle("Plot of the data"))
    
  store_res <- lapply(c(2:10), function(x) one_k_mean_matrix(data = data,
                                                             starting_seed = 599,
                                                             k = x))
  scores <- t(data.frame(lapply(store_res, function(x) squared_distance_from_one(x)))) |> 
    data.frame(row.names = NULL) |> 
    mutate(cluster = row_number() + 1)
  
  colnames(scores) <- c("Score", "Cluster")
  print(scores)
  
  H_function(store_res) |> 
    pivot_longer(cols = -Cluster_Num) |> 
    mutate(Cluster_Num = factor(Cluster_Num, levels = c(2:10), ordered = TRUE)) |> 
    ggplot(aes(x = Cluster_Num, y = value, fill = name)) +
    geom_bar(stat = "identity", position = "dodge") +
    theme_minimal() +
    ggtitle("Plot of 1 and -1 after removing all values that are not in c(1, -1)")
}

null_multiple <- function(data = data,
                          starting_seed = 599,
                          number_of_resamples = 15,
                          n = 5,
                          max_k = 5) {
  lapply(c(1:n), function(i) {
    temp_seed <- starting_seed * i
    store_res <- lapply(c(2:max_k), function(x) one_k_mean_matrix(data = data,
                                                                  starting_seed = temp_seed,
                                                                  k = x,
                                                                  number_of_resamples = number_of_resamples))
    H_function(store_res)
  }) |> 
    reduce(`rbind`)
}

null_multiple_random_unif_init <- function(starting_seed = 599,
                                          number_of_resamples = 15,
                                          n = 5,
                                          max_k = 5) {
  lapply(c(1:n), function(i) {
    temp_seed <- starting_seed * i
    set.seed(temp_seed)
    data <- data.frame(cbind(runif(100), runif(100)))
    store_res <- lapply(c(2:max_k), function(x) one_k_mean_matrix(data = data,
                                                                  starting_seed = temp_seed,
                                                                  k = x,
                                                                  number_of_resamples = number_of_resamples))
    H_function(store_res)
  }) |> 
    reduce(`rbind`)
}

null_multiple_random_normal_init <- function(starting_seed = 599,
                                          number_of_resamples = 15,
                                          n = 5,
                                          max_k = 5) {
  lapply(c(1:n), function(i) {
    temp_seed <- starting_seed * i
    set.seed(temp_seed)
    data <- data.frame(cbind(rnorm(100), rnorm(100)))
    store_res <- lapply(c(2:max_k), function(x) one_k_mean_matrix(data = data,
                                                                  starting_seed = temp_seed,
                                                                  k = x,
                                                                  number_of_resamples = number_of_resamples))
    H_function(store_res)
  }) |> 
    reduce(`rbind`)
}

```

```{r}
set.seed(100)
random_normal <- data.frame(cbind(rnorm(100), rnorm(100)))


random_unif <- data.frame(cbind(runif(100), runif(100)))
```

15 Clusters, 30 n, with 20 resamples on a random uniform 
```{r}
# set.seed(599)
# final_result <- null_multiple(data = random_unif,
#                 max_k = 16,
#                 n = 30,
#                 number_of_resamples = 20)
# write.csv(final_result, file = "uniform_16k_30n_20r.csv")
```

15 Clusters, 50 times, with 20 resamples on a random Normal 
```{r}
# set.seed(599)
# final_result_2 <- null_multiple(data = random_normal,
#                 max_k = 16,
#                 n = 30,
#                 number_of_resamples = 20)
# write.csv(final_result_2, file = "normal_16k_30n_20r.csv")
```

```{r}
# final_result |> 
#   ggplot(aes(x = factor(Cluster_Num, levels = 2:16, ordered = TRUE), y = One)) +
#   geom_boxplot() +
#   ggtitle("15 Clusters, 30 n, with 20 resamples on a random UNIFORM") +
#   theme_minimal()
# 
# final_result_2 |> 
#   ggplot(aes(x = factor(Cluster_Num, levels = 2:16, ordered = TRUE), y = One)) +
#   geom_boxplot() +
#   ggtitle("15 Clusters, 30 n, with 20 resamples on a random NORMAL") +
#   theme_minimal()
# 
# final_result |> 
#   ggplot(aes(x = factor(Cluster_Num, levels = 2:16, ordered = TRUE), y = Neg_One)) +
#   geom_boxplot() +
#   ggtitle("15 Clusters, 30 n, with 20 resamples on a random UNIFORM") +
#   theme_minimal()
# 
# final_result_2 |> 
#   ggplot(aes(x = factor(Cluster_Num, levels = 2:16, ordered = TRUE), y = Neg_One)) +
#   geom_boxplot() +
#   ggtitle("15 Clusters, 30 n, with 20 resamples on a random NORMAL") +
#   theme_minimal()
```

## Randomize the uniform distribution after each rerun... why? Because we don't want results to be dependent on initial start. 
```{r}
# set.seed(599)
# final_result_init <- null_multiple_random_unif_init(max_k = 16,
#                                                     n = 30,
#                                                     number_of_resamples = 20)
# write.csv(final_result_init, file = "unif_16k_30n_20r_random_init.csv")
```


```{r}
# set.seed(599)
# final_result_2_init <- null_multiple_random_normal_init(max_k = 16,
#                                                         n = 30,
#                                                         number_of_resamples = 20)
# write.csv(final_result_2_init, file = "normal_16k_30n_20r_random_init.csv")
```


## Read in Saved data
### Plot of the randomized data
```{r}
random_normal |> 
  ggplot(aes(x = X1, y = X2)) +
  geom_point()

random_unif |> 
  ggplot(aes(x = X1, y = X2)) +
  geom_point()
```

```{r}
## Randomly select a uniform/normal, and then use that same dataset with random starting conditions.
final_result <- read_csv("uniform_16k_30n_20r.csv")
final_result_2 <- read_csv("normal_16k_30n_20r.csv")

final_result |> 
  ggplot(aes(x = factor(Cluster_Num, levels = 2:16, ordered = TRUE), y = One)) +
  geom_boxplot() +
  ggtitle("15 Clusters, 30 n, with 20 resamples on a random UNIFORM") +
  scale_y_continuous(limits = c(0, 2000)) +
  theme_minimal()

final_result_2 |> 
  ggplot(aes(x = factor(Cluster_Num, levels = 2:16, ordered = TRUE), y = One)) +
  geom_boxplot() +
  ggtitle("15 Clusters, 30 n, with 20 resamples on a random NORMAL") +
  scale_y_continuous(limits = c(0, 2000)) +
  theme_minimal()

final_result |> 
  ggplot(aes(x = factor(Cluster_Num, levels = 2:16, ordered = TRUE), y = Neg_One)) +
  geom_boxplot() +
  ggtitle("15 Clusters, 30 n, with 20 resamples on a random UNIFORM") +
  scale_y_continuous(limits = c(0, 5000)) +
  theme_minimal()

final_result_2 |> 
  ggplot(aes(x = factor(Cluster_Num, levels = 2:16, ordered = TRUE), y = Neg_One)) +
  geom_boxplot() +
  ggtitle("15 Clusters, 30 n, with 20 resamples on a random NORMAL") +
  scale_y_continuous(limits = c(0, 5000)) +
  theme_minimal()
```

## Randomize initial starting conditions with each iteration
```{r}
final_result_init <- read_csv("unif_16k_30n_20r_random_init.csv")
final_result_2_init <- read_csv("normal_16k_30n_20r_random_init.csv")

final_result_init |> 
  ggplot(aes(x = factor(Cluster_Num, levels = 2:16, ordered = TRUE), y = One)) +
  geom_boxplot() +
  ggtitle("15 Clusters, 30 n, with 20 resamples on a random UNIFORM
          (Generates New Simulated Data per n)") +
  scale_y_continuous(limits = c(0, 2000)) +
  theme_minimal()

final_result_2_init |> 
  ggplot(aes(x = factor(Cluster_Num, levels = 2:16, ordered = TRUE), y = One)) +
  geom_boxplot() +
  ggtitle("15 Clusters, 30 n, with 20 resamples on a random NORMAL
          (Generates New Simulated Data per n)") +
  scale_y_continuous(limits = c(0, 2000)) +
  theme_minimal()

final_result_init |> 
  ggplot(aes(x = factor(Cluster_Num, levels = 2:16, ordered = TRUE), y = Neg_One)) +
  geom_boxplot() +
  ggtitle("15 Clusters, 30 n, with 20 resamples on a random UNIFORM
          (Generates New Simulated Data per n)") +
  scale_y_continuous(limits = c(0, 5000)) +
  theme_minimal()

final_result_2_init |> 
  ggplot(aes(x = factor(Cluster_Num, levels = 2:16, ordered = TRUE), y = Neg_One)) +
  geom_boxplot() +
  ggtitle("15 Clusters, 30 n, with 20 resamples on a random NORMAL
          (Generates New Simulated Data per n)") +
  scale_y_continuous(limits = c(0, 5000)) +
  theme_minimal()

# Note... due to the way that uniform is constrained between 0 and 1, I think it
# could cause weird behavior at cluster = 4 due to the 4 corners of the distributed data...

```

